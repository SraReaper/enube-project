// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: fornecedores.sql

package db

import (
	"context"
)

const getFornecedoresById = `-- name: GetFornecedoresById :one
SELECT id, partner_id, partner_name, customer_id, customer_name, customer_domain_name, customer_country, mpn_id, tier2_mpn_id, invoice_number, product_id, sku_id, availability_id, sku_name, product_name, publisher_name, publisher_id, subscription_description, subscription_id, charge_start_date, charge_end_date, usage_date, meter_type, meter_category, meter_id, meter_sub_category, meter_name, meter_region, unit, resource_location, consumed_service, resource_group, resource_uri, charge_type, unit_price, quantity, unit_type, billing_pre_tax_total, billing_currency, pricing_pre_tax_total, pricing_currency, service_info1, service_info2, tags, additional_info, effective_unit_price, pc_to_bc_exchange_rate, pc_to_bc_exchange_rate_date, entitlement_id, entitlement_description, partner_earned_credit_percentage, credit_percentage, credit_type, benefit_order_id, benefit_id, benefit_type, user_id FROM fornecedores_dados WHERE user_id = $1
`

func (q *Queries) GetFornecedoresById(ctx context.Context, userID int32) (FornecedoresDado, error) {
	row := q.db.QueryRow(ctx, getFornecedoresById, userID)
	var i FornecedoresDado
	err := row.Scan(
		&i.ID,
		&i.PartnerID,
		&i.PartnerName,
		&i.CustomerID,
		&i.CustomerName,
		&i.CustomerDomainName,
		&i.CustomerCountry,
		&i.MpnID,
		&i.Tier2MpnID,
		&i.InvoiceNumber,
		&i.ProductID,
		&i.SkuID,
		&i.AvailabilityID,
		&i.SkuName,
		&i.ProductName,
		&i.PublisherName,
		&i.PublisherID,
		&i.SubscriptionDescription,
		&i.SubscriptionID,
		&i.ChargeStartDate,
		&i.ChargeEndDate,
		&i.UsageDate,
		&i.MeterType,
		&i.MeterCategory,
		&i.MeterID,
		&i.MeterSubCategory,
		&i.MeterName,
		&i.MeterRegion,
		&i.Unit,
		&i.ResourceLocation,
		&i.ConsumedService,
		&i.ResourceGroup,
		&i.ResourceUri,
		&i.ChargeType,
		&i.UnitPrice,
		&i.Quantity,
		&i.UnitType,
		&i.BillingPreTaxTotal,
		&i.BillingCurrency,
		&i.PricingPreTaxTotal,
		&i.PricingCurrency,
		&i.ServiceInfo1,
		&i.ServiceInfo2,
		&i.Tags,
		&i.AdditionalInfo,
		&i.EffectiveUnitPrice,
		&i.PcToBcExchangeRate,
		&i.PcToBcExchangeRateDate,
		&i.EntitlementID,
		&i.EntitlementDescription,
		&i.PartnerEarnedCreditPercentage,
		&i.CreditPercentage,
		&i.CreditType,
		&i.BenefitOrderID,
		&i.BenefitID,
		&i.BenefitType,
		&i.UserID,
	)
	return i, err
}
